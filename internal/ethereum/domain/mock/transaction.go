// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ethereum/domain/transaction.go
//
// Generated by this command:
//
//	mockgen -source internal/ethereum/domain/transaction.go -destination internal/ethereum/domain/mock/transaction.go -package=mockDomain
//

// Package mockDomain is a generated GoMock package.
package mockDomain

import (
	context "context"
	reflect "reflect"
	data "trust_walet/internal/ethereum/data"
	rpc "trust_walet/internal/ethereum/rpc"

	gomock "go.uber.org/mock/gomock"
)

// MockAddressServiceInterface is a mock of AddressServiceInterface interface.
type MockAddressServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAddressServiceInterfaceMockRecorder
}

// MockAddressServiceInterfaceMockRecorder is the mock recorder for MockAddressServiceInterface.
type MockAddressServiceInterfaceMockRecorder struct {
	mock *MockAddressServiceInterface
}

// NewMockAddressServiceInterface creates a new mock instance.
func NewMockAddressServiceInterface(ctrl *gomock.Controller) *MockAddressServiceInterface {
	mock := &MockAddressServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAddressServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressServiceInterface) EXPECT() *MockAddressServiceInterfaceMockRecorder {
	return m.recorder
}

// IsSubscribed mocks base method.
func (m *MockAddressServiceInterface) IsSubscribed(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubscribed", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSubscribed indicates an expected call of IsSubscribed.
func (mr *MockAddressServiceInterfaceMockRecorder) IsSubscribed(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubscribed", reflect.TypeOf((*MockAddressServiceInterface)(nil).IsSubscribed), address)
}

// MockTransactionStorage is a mock of TransactionStorage interface.
type MockTransactionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStorageMockRecorder
}

// MockTransactionStorageMockRecorder is the mock recorder for MockTransactionStorage.
type MockTransactionStorageMockRecorder struct {
	mock *MockTransactionStorage
}

// NewMockTransactionStorage creates a new mock instance.
func NewMockTransactionStorage(ctrl *gomock.Controller) *MockTransactionStorage {
	mock := &MockTransactionStorage{ctrl: ctrl}
	mock.recorder = &MockTransactionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStorage) EXPECT() *MockTransactionStorageMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockTransactionStorage) Exists(address, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", address, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockTransactionStorageMockRecorder) Exists(address, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockTransactionStorage)(nil).Exists), address, hash)
}

// FetchAllByAddress mocks base method.
func (m *MockTransactionStorage) FetchAllByAddress(address string) []data.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllByAddress", address)
	ret0, _ := ret[0].([]data.Transaction)
	return ret0
}

// FetchAllByAddress indicates an expected call of FetchAllByAddress.
func (mr *MockTransactionStorageMockRecorder) FetchAllByAddress(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllByAddress", reflect.TypeOf((*MockTransactionStorage)(nil).FetchAllByAddress), address)
}

// SaveForAddress mocks base method.
func (m *MockTransactionStorage) SaveForAddress(address string, transaction *data.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveForAddress", address, transaction)
}

// SaveForAddress indicates an expected call of SaveForAddress.
func (mr *MockTransactionStorageMockRecorder) SaveForAddress(address, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveForAddress", reflect.TypeOf((*MockTransactionStorage)(nil).SaveForAddress), address, transaction)
}

// MockTransactionRpcClient is a mock of TransactionRpcClient interface.
type MockTransactionRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRpcClientMockRecorder
}

// MockTransactionRpcClientMockRecorder is the mock recorder for MockTransactionRpcClient.
type MockTransactionRpcClientMockRecorder struct {
	mock *MockTransactionRpcClient
}

// NewMockTransactionRpcClient creates a new mock instance.
func NewMockTransactionRpcClient(ctrl *gomock.Controller) *MockTransactionRpcClient {
	mock := &MockTransactionRpcClient{ctrl: ctrl}
	mock.recorder = &MockTransactionRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRpcClient) EXPECT() *MockTransactionRpcClientMockRecorder {
	return m.recorder
}

// GetBlockByNumber mocks base method.
func (m *MockTransactionRpcClient) GetBlockByNumber(ctx context.Context, number string) (*rpc.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, number)
	ret0, _ := ret[0].(*rpc.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockTransactionRpcClientMockRecorder) GetBlockByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockTransactionRpcClient)(nil).GetBlockByNumber), ctx, number)
}
