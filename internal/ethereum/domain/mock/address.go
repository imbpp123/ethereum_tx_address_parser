// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ethereum/domain/address.go
//
// Generated by this command:
//
//	mockgen -source internal/ethereum/domain/address.go -destination internal/ethereum/domain/mock/address.go -package=mockDomain
//

// Package mockDomain is a generated GoMock package.
package mockDomain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAddressStorage is a mock of AddressStorage interface.
type MockAddressStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAddressStorageMockRecorder
}

// MockAddressStorageMockRecorder is the mock recorder for MockAddressStorage.
type MockAddressStorageMockRecorder struct {
	mock *MockAddressStorage
}

// NewMockAddressStorage creates a new mock instance.
func NewMockAddressStorage(ctrl *gomock.Controller) *MockAddressStorage {
	mock := &MockAddressStorage{ctrl: ctrl}
	mock.recorder = &MockAddressStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressStorage) EXPECT() *MockAddressStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAddressStorage) Add(address string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", address)
}

// Add indicates an expected call of Add.
func (mr *MockAddressStorageMockRecorder) Add(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddressStorage)(nil).Add), address)
}

// Exists mocks base method.
func (m *MockAddressStorage) Exists(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockAddressStorageMockRecorder) Exists(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAddressStorage)(nil).Exists), address)
}
