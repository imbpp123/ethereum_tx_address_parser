// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ethereum/domain/block.go
//
// Generated by this command:
//
//	mockgen -source internal/ethereum/domain/block.go -destination internal/ethereum/domain/mock/block.go -package=mockDomain
//

// Package mockDomain is a generated GoMock package.
package mockDomain

import (
	context "context"
	reflect "reflect"
	rpc "trust_walet/internal/ethereum/rpc"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactionServiceInterface is a mock of TransactionServiceInterface interface.
type MockTransactionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceInterfaceMockRecorder
}

// MockTransactionServiceInterfaceMockRecorder is the mock recorder for MockTransactionServiceInterface.
type MockTransactionServiceInterfaceMockRecorder struct {
	mock *MockTransactionServiceInterface
}

// NewMockTransactionServiceInterface creates a new mock instance.
func NewMockTransactionServiceInterface(ctrl *gomock.Controller) *MockTransactionServiceInterface {
	mock := &MockTransactionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceInterface) EXPECT() *MockTransactionServiceInterfaceMockRecorder {
	return m.recorder
}

// ProcessBlockTransactionsByBlockNumber mocks base method.
func (m *MockTransactionServiceInterface) ProcessBlockTransactionsByBlockNumber(ctx context.Context, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBlockTransactionsByBlockNumber", ctx, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBlockTransactionsByBlockNumber indicates an expected call of ProcessBlockTransactionsByBlockNumber.
func (mr *MockTransactionServiceInterfaceMockRecorder) ProcessBlockTransactionsByBlockNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBlockTransactionsByBlockNumber", reflect.TypeOf((*MockTransactionServiceInterface)(nil).ProcessBlockTransactionsByBlockNumber), ctx, number)
}

// MockBlockRpcClient is a mock of BlockRpcClient interface.
type MockBlockRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRpcClientMockRecorder
}

// MockBlockRpcClientMockRecorder is the mock recorder for MockBlockRpcClient.
type MockBlockRpcClientMockRecorder struct {
	mock *MockBlockRpcClient
}

// NewMockBlockRpcClient creates a new mock instance.
func NewMockBlockRpcClient(ctrl *gomock.Controller) *MockBlockRpcClient {
	mock := &MockBlockRpcClient{ctrl: ctrl}
	mock.recorder = &MockBlockRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRpcClient) EXPECT() *MockBlockRpcClientMockRecorder {
	return m.recorder
}

// GetBlockByNumber mocks base method.
func (m *MockBlockRpcClient) GetBlockByNumber(ctx context.Context, number string) (*rpc.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, number)
	ret0, _ := ret[0].(*rpc.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockBlockRpcClientMockRecorder) GetBlockByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockRpcClient)(nil).GetBlockByNumber), ctx, number)
}

// MockBlockStorage is a mock of BlockStorage interface.
type MockBlockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStorageMockRecorder
}

// MockBlockStorageMockRecorder is the mock recorder for MockBlockStorage.
type MockBlockStorageMockRecorder struct {
	mock *MockBlockStorage
}

// NewMockBlockStorage creates a new mock instance.
func NewMockBlockStorage(ctrl *gomock.Controller) *MockBlockStorage {
	mock := &MockBlockStorage{ctrl: ctrl}
	mock.recorder = &MockBlockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStorage) EXPECT() *MockBlockStorageMockRecorder {
	return m.recorder
}

// GetCurrentBlockNumber mocks base method.
func (m *MockBlockStorage) GetCurrentBlockNumber() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBlockNumber")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBlockNumber indicates an expected call of GetCurrentBlockNumber.
func (mr *MockBlockStorageMockRecorder) GetCurrentBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBlockNumber", reflect.TypeOf((*MockBlockStorage)(nil).GetCurrentBlockNumber))
}

// SetCurrentBlockNumber mocks base method.
func (m *MockBlockStorage) SetCurrentBlockNumber(value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentBlockNumber", value)
}

// SetCurrentBlockNumber indicates an expected call of SetCurrentBlockNumber.
func (mr *MockBlockStorageMockRecorder) SetCurrentBlockNumber(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentBlockNumber", reflect.TypeOf((*MockBlockStorage)(nil).SetCurrentBlockNumber), value)
}
